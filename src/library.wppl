var SHOW_DEBUG_INFO = true;

var cacheStates = webpplIntercache.cacheStates;

var printTime = function(f) {
  var obj = timeit(f);
  console.log('time ' + obj.runtimeInMilliseconds);
  return obj.value;
}

var mean = function(erp) {
  return expectation(erp, function(x) {return x;});
};

var variance = function(erp) {
  var m = mean(erp);
  return expectation(erp, function(x) { return (x - m) * (x - m); });
};

var call = function(method, arg1, arg2, arg3) {
  return method && method(arg1, arg2, arg3);
};

// Copied and modified from webppl/src/header.wppl
var repeatIndexed = function(n, fn) {
  var helper = function(m, offset) {
    if (m == 0) {
      return [];
    } else if (m == 1) {
      return [fn(offset)]; // Pass the offset to fn, this is the difference with the built-in repeat
    } else {
      var m1 = Math.ceil(m / 2),
          m2 = m - m1;
      return helper(m1, offset).concat(helper(m2, offset + m1));
    }
  }

  return helper(n, 0);
}

var indexWith = function(array, indices) {
  return map(function(i) {
    return array[i];
  }, indices);
}

// Returns a pair of two arrays: the selected inputs, and the selected outputs
var selectN = function(n, inputs, outputs, forceIncludeLast) {
  if (n === 0) {
    return [[], []];
  }

  var length = inputs.length;
  if (n >= length) {
    return [inputs, outputs];
  }

  if (forceIncludeLast) {
    // Secret randomness
    var indices = repeat(n - 1, function() { return Math.floor(util.random() * length) });
    return [snoc(indexWith(inputs, indices), inputs[length - 1]),
            snoc(indexWith(outputs, indices), outputs[length - 1])];
  }
  else {
    var indices = repeat(n, function() { return Math.floor(util.random() * length); });
    return [indexWith(inputs, indices), indexWith(outputs, indices)];
  }
}

var makePolynomialFunction = function(options) {
  // Define a gaussian for each coefficient of the polynomrial
  // based on guide params
  var coefficients = repeatIndexed(options.degree + 1, function(i) {
    var priorMean = call(options.prior.meanFunc, i);
    var priorVariance = call(options.prior.varianceFunc, i);

    return sample(Gaussian({ mu: priorMean, sigma: priorVariance }));
  });

  // Create function parameterized by the given coefficients
  return function(x) {
    return sum(mapIndexed(function(i, c) {
      return c * Math.pow(x, i);
    }, coefficients));
  };
};

var makeLinearFunction = function(options) {
    // Define slope/offset and parameterize based on guide params
    var guideOffsetMean = param(options.guide.initialOffsetMean);
    var guideOffsetVar = param(options.guide.initialOffsetVar);
    var guideSlopeMean = param(options.guide.initialSlopeMean);
    var guideSlopeVar = param(options.guide.initialSlopeVar);

    // Priors on offset and slope
    var offset = sample(Gaussian({ mu: options.prior.offsetMean, sigma: options.prior.offsetVar }), {
      guide: Gaussian({ mu: guideOffsetMean, sigma: guideOffsetVariance })
    });
    var slope = sample(Gaussian({ mu: options.prior.slopeMean, sigma: options.prior.slopeVar }), {
      guide: Gaussian({ mu: guideSlopeMean, sigma: guideSlopeVariance })
    });

    // Create function parameterized by offset and slope
    return function(x) {
      var y = x * slope + offset;
      return y;
    };
};

// Note: priorFunc calls the param function, which means that it must *only* be called
// in distOnFuncs
var interCache = function(slowFunc, options, priorFunc) {

  var state = cacheStates.add({
    data: {
      inputs: [],
      outputs: []
    }
  });

  var distOnReturnVals = function(arg) {
    var f = priorFunc(options.funcGeneration);
    var regressionVariance = gamma(options.regressionVarianceGammaShape, options.regressionVarianceGammaScale);
    
    {
      // Soft conditioning on input-output data
      var numExamples = options.hyperparams.optimization.maxNumExamples || 20;
      var examples = selectN(numExamples, state.get('data').inputs, state.get('data').outputs, /*forceIncludeLast*/ true);
      var inputs = examples[0], outputs = examples[1];
      var scores = map2(
        function(input, output){
          return Gaussian({ mu: f(input), sigma: regressionVariance }).score(output);
        },
        inputs, outputs);
      factor(sum(scores));

      return f(arg);
    }
  };

  
  // Given argument, return distribution on return values
  var stochasticSurrogate = function(arg) {
    var marginal = Infer({
      method: 'MCMC',
      kernel: 'HMC',
      samples: 1000,
      burn: 200
    }, function() {
      return distOnReturnVals(arg);
    });

    return marginal;
  };

  var fastFunc = function(arg) {
    var distOnReturnVals = stochasticSurrogate(arg);  // don't condition on data here
    var returnValMean = mean(distOnReturnVals);
    var returnValVariance = variance(distOnReturnVals);

    if (SHOW_DEBUG_INFO) {
      var _trueReturnVal = slowFunc(arg);
      console.log('\nError:', Math.abs(returnValMean - _trueReturnVal));
      console.log('                Argument:', arg);
      console.log('  Estimated return value:', returnValMean);
      console.log('     Estimation variance:', returnValVariance);
      console.log('       True return value:', _trueReturnVal);
      // console.log('                  Params:', state.get('guideParams'));
    }

    if (returnValVariance > options.hyperparams.threshold) {
      // console.log('miss');
      var trueReturnVal = slowFunc(arg);
      if (!call(options.ignoreDataPointPredicate, arg)) {
        state.get('data').inputs.push(arg);
        state.get('data').outputs.push(trueReturnVal);
      }
      else if (SHOW_DEBUG_INFO) {
        console.log("Ignoring " + arg);
      }

      return {
        arg: arg,
        result: trueReturnVal,
        estimatedReturnValue: returnValMean,
        returnValVariance: returnValVariance,
        isCacheHit: false
      };
    } else {
      // console.log('hit');
      return {
        arg: arg,
        result: returnValMean,
        estimatedReturnValue: returnValMean,
        returnValVariance: returnValVariance,
        isCacheHit: true
      };
    }
  };

  return {
    func: fastFunc,
    predictor: stochasticSurrogate,
    data: state.get('data')
  };
  
};

console.log('library.wppl loaded.');
