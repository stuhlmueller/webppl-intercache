// time webppl naturalPrevalence.wppl --require-js ./naturalUtils.js --require-wppl ./naturalUtils.wppl
var fpath = "/Users/mht/Documents/research/generics/manuscript/data/"
// var Priordata = naturalUtils.readCSV(fpath+"real-kinds-prior-2-trials-formatted.csv").data
var Priordata = genUtils.readCSV(fpath+"naturalGenerics-prior-trials-n57.csv").data
var Truthdata = genUtils.readCSV(fpath+"naturalGenerics-trials-formatted.csv").data

// babyparse adds an extra line at the end.
// var df_prior0a = dataFrame(Priordata.slice(0,Priordata.length-1))
// var df_prior0b = dataFrame(Priordata.slice(0,Priordata.length-1))
// var df_prior = _.flatten([df_prior0a, df_prior0b])
var df_prior = dataFrame(Priordata.slice(0,Priordata.length-1))
var df_prior_avoidEnds = map(function(x){
	return _.extend(x, {alignedResponse : alignPrevalence(x.prevalence)})
}, df_prior)

var df_truth = dataFrame(Truthdata.slice(0,Truthdata.length-1))

// var properties = _.uniq(_.pluck(df_prior,"Property"))
var properties = ["are full-grown"]
var categories = ["Swans"]

var prevalenceModel = function(){

	foreach(properties, function(p){

		var propertyData = subset(df_prior, "Property", p)
		// var categories = _.uniq(_.pluck(subset(df_truth, "Property", p), "Category"))

		foreach(categories, function(k){
			// console.log(k,p)
			var categoryData = _.pluck(subset(propertyData, "Category", k), "alignedResponse")
			var g = uniform(0,1)
			var d = uniform(0,50)

			// pseudocount parameterization
			var a = shape_alpha(g,d)
			var b = shape_beta(g,d)

			// var discreteBetaProbs = discretizeBeta(gamma, delta)
			// var discreteBetaProbsNormalized = map(function(x){return x/sum(discreteBetaProbs)}, discreteBetaProbs)

			var scr = sum(map(function(di){
				return betaERP.score([a,b], di)
			}, categoryData))
			// console.log(scr)

			factor(scr)

			// for linking with generics.wppl
			// query.add([k,p], avoidUpperBound(Math.round(g*10)/10))
			query.add([k,p], genUtils.closest(bins, g))

			// for just doing inference over the prevalence 
			// query.add(["prevalence",p, k, "gamma"], gamma)
			// query.add(["prevalence",p, k, "delta"], delta)
		})
	})
	
	// for just doing inference over the prevalence 
	// query.add(["prevalence","na", "na", "phi"], phi)
	return query
}

// for just doing inference 
// var mhiter = 100000
// var resultsERP = IncrementalMH(prevalenceModel, mhiter, {verbose:"true"})
// var outfile = '../model-results/generics-naturalPrevalence-incrMH'+mhiter+'a.csv'
// naturalUtils.erpWriter(resultsERP, outfile)
// console.log('wrote to... ' + outfile)
// console.log(df_truth)


