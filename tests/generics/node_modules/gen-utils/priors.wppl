// time webppl naturalPriors.wppl --require-js ./naturalUtils.js --require-wppl ./naturalPrevalence.wppl --require-wppl ./naturalUtils.wppl

var priorModel = function(){

	// var phi = uniform(0,1)
	// var phi = 0

	foreach(properties, function(p){

		var propertyData = subset(df_prior, "Property", p)
		var responseData = _.pluck(propertyData, "alignedResponse")

		var theta = beta(1,1)

		// var scr1 = reduce(function(d, memo) {
		// 					// console.log(d)
		// 				    return memo + bernoulliERP.score([prob_hasF], d!=0)
		// 					}, 0, responseData)
		// factor(scr1)

		// for just doing inference over the priors 
		// query.add(["prevalencePrior",p,"na","prob_hasF"], prob_hasF)

		var g = uniform(0,1)
		var d = uniform(0,50)
		// pseudocount parameterization
		var a = shape_alpha(g,d)
		var b = shape_beta(g,d)

		var scr = sum(map(function(d) {
							return Math.log((d==0)*(1-theta) + 
											(d>0)*theta*Math.exp(betaERP.score([a,b], d))
											)
						}, responseData))

		// var discreteBetaProbs = discretizeBeta(gamma, delta)
		// var discreteBetaProbsNormalized = map(function(x){return x/sum(discreteBetaProbs)}, discreteBetaProbs)

		// var scr2 = reduce(function(d, memo) {
		// 					var x = d==0? 0 :  
		// 						Math.log(
		// 							(phi*guessing) + 
		// 							((1-phi) * discreteBetaProbsNormalized[bins.indexOf(alignPrevalence(d))])
		// 							)
		// 				    return memo + x
		// 					}, 0, responseData)

		factor(scr)
		
		// for linking with truthJudgments.wppl
		var discretized_prevalence = discretizedPriorModel(theta, g, d)
		query.add(p, discretized_prevalence)
		// for just doing inference over the priors 
		// query.add(["prevalencePrior",p,"na","gamma"], gamma)
		// query.add(["prevalencePrior",p,"na","delta"], delta)

	})
	
	// query.add(["prevalencePrior","na","na","phi"], phi)
	return query
}

// for just doing inference 
// var mhiter = 100000
// var resultsERP = IncrementalMH(priorModel, mhiter, {verbose:"true"})
// var outfile = '../model-results/generics-naturalPriors-incrMH'+mhiter+'a.csv'
// naturalUtils.erpWriter(resultsERP, outfile)
// console.log('wrote to... ' + outfile)



