var bins = [0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.99]

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

// var subset = function(df, field, value){
// 	return filter(function(d){
// 		return (d[field]==value)
// 	},df)
// }

var discretizeBeta = function(gamma, delta){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, bins)
}
var marginalizeERP = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}

var avoidEnds = function(response){
	return response==0 ? 0.01 : response==1 ? 0.99 : response
}

var avoidUpperBound = function(response){
	return response==1 ? 0.99 : response
}

var alignPrevalence = function(number){
	return avoidEnds(Math.round(number/10)/10)
}

// use first row as (header) variable names
var dataFrame = function(rawCSV){
    return map(function(row){
        return _.object(_.zip(rawCSV[0],row))
    }, rawCSV.slice(1))
}

var shape_alpha = function(gamma,delta){return gamma * delta}
var shape_beta = function(gamma,delta){return (1-gamma) * delta}


var discretizedPriorModel = function(hasF, g1, d1){
	var getProbsFromERP = function(myERP, orderedSupport){
		return map(function(s){
			Math.exp(myERP.score([], s))
		}, orderedSupport)
	}
	// discretization occurs here
	var prevalencePrior = 
		Enumerate(function(){
			var kindHasF = flip(hasF)
			var prevalenceGivenK = kindHasF ? 
									bins[discrete(discretizeBeta(g1,d1))] : 
									0

			return prevalenceGivenK
		})
	return getProbsFromERP(prevalencePrior, 
				[0, 0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99]
		)
}


// var softmaxSpeaker2 = function(myERP, softmax){
// 	Enumerate(function(){
// 		var p = naturalUtils.softmax(Math.exp(myERP.score([], "generic is true")), softmax)
// 		var response = flip(p) ? "generic is true" : "mu"
// 		return response
// 	})
// }

var softmaxSpeaker = function(speakerERP, softmax){
  Enumerate(function(){
      var supp = speakerERP.support()
      var probs = map(function(s){return Math.exp(softmax*speakerERP.score([],s))}, supp)
      var response = supp[discrete(probs)]
      return response
  })
}


var guessingLink = function(myERP, phi){
	Enumerate(function(){

		var x = flip(1-phi) ? 
					sample(myERP) :
					["generic is true","mu"][discrete([0.5,0.5])]
		return x
	})
}

