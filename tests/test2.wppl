// Run using:
// webppl tests/test2.wppl --require webppl-timeit --require webppl-json --require .


var range = function(n) {
  if (n == 0) {
    return [];
  } else {
    return range(n-1).concat([n]);
  }
}


var N = 10;

var slowBinomial = function(p) {
  return Enumerate(function(){
    var xs = repeat(N, function(){ return flip(p); });
    return sum(xs);
  });
};

// this is the function we want to speed up by caching
var slowBinomialMean = function(p) {
  return mean(slowBinomial(p));
};

//var fastBinomialMean = interCache(slowBinomialMean);

var getMeanResult = function(val) {
  return typeof val === 'number'
    ? val // slowBinomialMean
    : val.result; // fastBinomialMean
};

var profile = function(label, binomialMean) {
  //console.log('\n' + label + ':');
  return timeit(function(){
    Rejection(function(){
      var p = uniform(0, 1);
      var result = getMeanResult(binomialMean(p));
      var correctAnswer = N * p;
      var error = Math.abs(result - correctAnswer);
      return error;
    }, 100); // .print();
  });
};



var randomlyTryParameters = function(label, iterations) {

  var filename = 'tests/randomParams/' + label + '.json';

  var collectDatum = function(iterationIndex){
    console.log('Collecting data...');    
    var options = {
      prior: {
        offsetMean: 0,
        offsetVar: 5,
        slopeMean: 1,
        slopeVar: 5
      },
      guide: {
        initialOffsetMean: 0,
        initialOffsetVar: 3,
        initialSlopeMean: 1,
        initialSlopeVar: 3
      },
      optimization: {
        stepSize: 0.01,  // uniform(0, .5)
        steps: 500 // Math.ceil(uniform(0, 2000))
      },
      prediction: {
        samples: 500 // Math.ceil(uniform(0, 1000))
      },
      regressionVariance: 1, // uniform(0, 2)
      threshold: 0.1 // uniform(0, 1)
    };    
    var fastBinomialMean = interCache(slowBinomialMean, options, makeLinearFunction);
    var time = profile('fastBinomialMean', fastBinomialMean);
    var datum = {
      stepSize: options.optimization.stepSize,
      optimizationSteps: options.optimization.steps,
      predictionSamples: options.prediction.samples,
      regressionVariance: options.regressionVariance,
      threshold: options.threshold,
      runtimeInMilliseconds: time.runtimeInMilliseconds,
      errors: time.value,
      iterationIndex: iterationIndex
    };        
    return datum;
  }
  var data = map(collectDatum, range(iterations));
  
  json.write(filename, {data: data});
};


randomlyTryParameters('run-10', 10);
