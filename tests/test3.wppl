// Run using:
// webppl tests/test3.wppl --require webppl-timeit --require webppl-json --require .

var N = 15;

var range = function(n) {
  if (n == 0) {
    return [];
  } else {
    return range(n-1).concat([n]);
  }
}

var slowBinomial = function(p) {
  return Enumerate(function(){
    var xs = repeat(N, function(){ return flip(p); });
    return sum(xs);
  });
};

// this is the function we want to speed up by caching
var slowBinomialMean = function(p) {
  return mean(slowBinomial(p));
};

var slowBinomialVariance = function(p) {
  return variance(slowBinomial(p));
}

var linearOptions = {
  funcGeneration: {
    prior: {
      offsetMean: 0,
      offsetVar: 5,
      slopeMean: 1,
      slopeVar: 5
    },
    guide: {
      initialOffsetMean: 0,
      initialOffsetVar: 3,
      initialSlopeMean: 1,
      initialSlopeVar: 3
    }
  },
  hyperparams: {
    optimization: {
      stepSize: 0.001,
      steps: 500,
      maxNumExamples: 20
    },
    prediction: {
      samples: 500
    },
    threshold: 0.1,
    bypassCacheProbability: 0.2
  },
  initialRegressionVariance: 1
};

var createPolynomialOptions = function(degree, ignoreFunction) {
  return {
    funcGeneration: {
      degree: degree,
      guide: {
        initialMeanFunc: function(i) { return i },
        initialVarianceFunc: function(i) { return 3 }
      },
      prior: {
        meanFunc: function(i) { return i },
        varianceFunc: function(i) { return 5 }
      }
    },
    hyperparams: linearOptions.hyperparams,
    initialRegressionVariance: linearOptions.initialRegressionVariance,
    ignoreDataPointPredicate: ignoreFunction
  };
};

var runTest = function(label, fastFunc, slowFunc, numberOfCalls) {
  console.log('\n' + label + ':');

  var indices = range(numberOfCalls);
  return map(function(index) {
  	console.log('Starting iteration ' + index + ', test ' + label);
  	var p = uniform(0, 1);
  	var slowTimeAndValue = timeit(function() { return slowFunc(p); });
  	var fastTimeAndValue = timeit(function() { return fastFunc(p); });

  	return {
  		slow: slowTimeAndValue,
  		fast: fastTimeAndValue
  	}
  }, indices);
};

var mapWindowMean = function(list, windowSize, fn) {
	var indices = range(list.length - windowSize);
	return map(function(i) {
		// For each index i, get the window and compute the mean on the window
		var window = map(fn, list.slice(i, i + windowSize));
		return sum(window) / windowSize;
	}, indices)
};

var generatePredictions = function(predictor, numInputs, minSupport, maxSupport, numSamples) {
  // Generate a list of numInputs points, starting at minSupport, ending at maxSupport.
  // Subtract 1 so that we include the top of the support.
  console.log("Generating " + numInputs + " predictions...");
  var distanceBetweenConsecutiveInputs = (maxSupport - minSupport) / (numInputs - 1);
  console.log(distanceBetweenConsecutiveInputs);
  var inputs = repeatIndexed(numInputs, function (i) {
    return minSupport + i * distanceBetweenConsecutiveInputs;
  });
  return mapReduce1(append, function(input) {
    console.log("Point " + input);
    return repeat(numSamples, function() {
      return [input, sample(predictor(input))];
    });
  }, inputs);
};

var runTestAndWriteResult = function(label, windowSize, slowFunc, priorFunction, options) {
	var fileName = 'tests/progressOverTime/' + label + '.json';
	var cacheResult = interCache(slowFunc, options, priorFunction);
  var fastFunc = cacheResult.func;
	var result = runTest(label, fastFunc, slowFunc, 500);

	// Accuracy over time for hits only
	var hits = filter(function(r) { return r.fast.value.isCacheHit; }, result);
	var errorOverTime = map(function(r) { return Math.abs(r.slow.value - r.fast.value.result); }, hits);

	// fraction of hits in a sliding window
	var hitRate = mapWindowMean(result, windowSize, function(r) { return r.fast.value.isCacheHit ? 1 : 0 });

	// Average time in a sliding window
	var avgTime = mapWindowMean(result, windowSize, function(r) { return r.fast.runtimeInMilliseconds });

	// Average for slow function over total span
	var avgSlowTime = sum(map(function(r) { return r.slow.runtimeInMilliseconds }, result)) / result.length;

	// Average time spent for cache hits
	var avgCacheLookupTime = sum(map(function(r) { return r.fast.runtimeInMilliseconds }, hits)) / hits.length;

  var predictions = generatePredictions(cacheResult.predictor, /*numInputs*/ 51, /*minSupport*/ 0, /*maxSupport*/ 1, /*numSamples*/ 30)

	json.write(fileName, {
		errorOverTime: errorOverTime,
		hitRate: hitRate,
		avgTime: avgTime,
		avgSlowTime: avgSlowTime,
		avgCacheLookupTime: avgCacheLookupTime,
    observedInputs: cacheResult.data.inputs,
    observedOutputs: cacheResult.data.outputs,
    predictedOutputs: predictions
	});
};

// runTestAndWriteResult('all-data', /*windowSize*/ 30, makeLinearFunction, linearOptions);
// runTestAndWriteResult('all-data-window-10', /*windowSize*/ 10, slowBinomialMean, makeLinearFunction, linearOptions);

// Linear function (slowBinomialMean)
// runTestAndWriteResult('linear-polynomial-0', /*windowSize*/ 20, slowBinomialMean, makePolynomialFunction, createPolynomialOptions(/*degree*/ 0));
runTestAndWriteResult('linear-polynomial-1', /*windowSize*/ 20, slowBinomialMean, makePolynomialFunction, createPolynomialOptions(/*degree*/ 1));
runTestAndWriteResult('linear-polynomial-2', /*windowSize*/ 20, slowBinomialMean, makePolynomialFunction, createPolynomialOptions(/*degree*/ 2));
runTestAndWriteResult('linear-polynomial-3', /*windowSize*/ 20, slowBinomialMean, makePolynomialFunction, createPolynomialOptions(/*degree*/ 3));
// runTestAndWriteResult('linear-polynomial-4', /*windowSize*/ 20, slowBinomialMean, makePolynomialFunction, createPolynomialOptions(/*degree*/ 4));

// Quadratic function (slowBinomialVariance)
// runTestAndWriteResult('quadratic-polynomial-0', /*windowSize*/ 20, slowBinomialVariance, makePolynomialFunction, createPolynomialOptions(/*degree*/ 0));
// runTestAndWriteResult('quadratic-polynomial-1', /*windowSize*/ 20, slowBinomialVariance, makePolynomialFunction, createPolynomialOptions(/*degree*/ 1));
runTestAndWriteResult('quadratic-polynomial-2', /*windowSize*/ 20, slowBinomialVariance, makePolynomialFunction, createPolynomialOptions(/*degree*/ 2));

// Make new options for ignoring certain data points
runTestAndWriteResult('quadratic-polynomial-3', /*windowSize*/ 20, slowBinomialVariance, makePolynomialFunction,
  createPolynomialOptions(/*degree*/ 3, function(arg) { return arg > 0.75; }));
runTestAndWriteResult('quadratic-polynomial-4', /*windowSize*/ 20, slowBinomialVariance, makePolynomialFunction,
  createPolynomialOptions(/*degree*/ 4, function(arg) { return arg > 0.75; }));
